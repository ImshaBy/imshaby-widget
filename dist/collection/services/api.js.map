{"version":3,"file":"api.js","sourceRoot":"","sources":["../../src/services/api.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,aAAa,CAAC;AAEpC,MAAM,OAAO,GAAG;IAMP,KAAK,CAAC,WAAW,CAAC,KAAK;QAC5B,MAAM,OAAO,CAAC,GAAG,CAAC;YAChB,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;YAC9B,IAAI,CAAC,qBAAqB,EAAE;SAC7B,CAAC,CAAA;IACJ,CAAC;IAEM,eAAe;QACpB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;QAC/B,OAAO,IAAI,CAAC,YAAY,CAAA;IAC1B,CAAC;IAEM,cAAc;QACnB,OAAO,IAAI,CAAC,WAAW,CAAA;IACzB,CAAC;IAEM,kBAAkB;QACvB,OAAO,IAAI,CAAC,eAAe,CAAA;IAC7B,CAAC;IAEO,kBAAkB,CAAC,KAAK;QAE9B,MAAM,YAAY,GAAG,IAAI,OAAO,EAAE,CAAC;QACnC,YAAY,CAAC,MAAM,CAAC,cAAc,EAAE,iCAAiC,CAAC,CAAC;QACvE,YAAY,CAAC,MAAM,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;QAC9C,YAAY,CAAC,MAAM,CAAC,qBAAqB,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;QAE3D,OAAO,KAAK,CAAC,KAAK,CAAC,YAAY,EAAE;YAC7B,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,YAAY;SACtB,CAAC;aACD,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;YACjB,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAA;QACxB,CAAC,CAAC;aACD,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;YACjB,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAA;YAC5B,OAAO,IAAI,CAAA;QACb,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,oBAAoB,GAAG,IAAI,GAAG,KAAK,GAAG,GAAG,CAAC,CAAA;QAClE,CAAC,CAAC,CAAA;IAEN,CAAC;IAEO,qBAAqB;QAE3B,MAAM,YAAY,GAAG,IAAI,OAAO,EAAE,CAAC;QACnC,YAAY,CAAC,MAAM,CAAC,eAAe,EAAE,yQAAyQ,CAAC,CAAC;QAEhT,OAAO,KAAK,CAAC,KAAK,CAAC,oBAAoB,EAAE;YACrC,MAAM,EAAE,KAAK;YACb,OAAO,EAAE,YAAY;YACrB,QAAQ,EAAE,QAAQ;SACnB,CAAC;aACD,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;YACjB,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAA;QACxB,CAAC,CAAC;aACD,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;YACjB,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAA;YACvE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;YAEhD,OAAO,CAAC,IAAI,CAAC,WAAW,KAAK,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,eAAe,KAAK,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAA;QAChG,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,wBAAwB,GAAG,IAAI,GAAG,KAAK,GAAG,GAAG,CAAC,CAAA;QACtE,CAAC,CAAC,CAAA;IAEN,CAAC;CAEF","sourcesContent":["import { CONST } from './constants';\r\n\r\nexport class API {\r\n\r\n  scheduleInfo: any;\r\n  colorScheme: string;\r\n  colorSchemeHash: string;\r\n\r\n  public async requestInfo(props) {\r\n    await Promise.all([\r\n      this.getScheduleFromAPI(props),\r\n      this.getColorSchemeFromAPI()\r\n    ])\r\n  }\r\n\r\n  public getScheduleInfo() {\r\n    console.info(this.scheduleInfo)\r\n    return this.scheduleInfo\r\n  }\r\n\r\n  public getColorScheme() {\r\n    return this.colorScheme\r\n  }\r\n\r\n  public getColorSchemeHash() {\r\n    return this.colorSchemeHash\r\n  }\r\n\r\n  private getScheduleFromAPI(props) {\r\n\r\n    const fetchHeaders = new Headers();\r\n    fetchHeaders.append('Content-Type', 'application/json; charset=utf-8');\r\n    fetchHeaders.append('x-show-pending', 'true');\r\n    fetchHeaders.append('parish-week-api-key', props.parishId);\r\n\r\n    return fetch(CONST.API_MASS_URL, {\r\n        method: 'GET',\r\n        headers: fetchHeaders,\r\n      })\r\n      .then((response) => {\r\n        return response.json()\r\n      })\r\n      .then((response) => {\r\n        this.scheduleInfo = response\r\n        return true\r\n      })\r\n      .catch((error) => {\r\n        throw new Error(CONST.ERR_GETTING_SCHEDULE + \" [\" + error + \"]\")\r\n      })\r\n\r\n  }\r\n\r\n  private getColorSchemeFromAPI() {\r\n\r\n    const fetchHeaders = new Headers();\r\n    fetchHeaders.append('Authorization', 'Bearer f47d0be041da384c077ed5e2c6adee196300b159b78f0b3c720780274f5215c5d75de0028e72d6b83f4065bd336d79c5007a31d62a7191f6b412017b2387ef6a9a578cf560557a37933853598be638235a785380b768065b491bfa46b024a83ea354a30e999ff604fb6d148904bf42c4374084d0746d6f2163ee077daa05f04c');\r\n\r\n    return fetch(CONST.API_COLOR_SCHEME_URL, {\r\n        method: 'GET',\r\n        headers: fetchHeaders,\r\n        redirect: \"follow\",\r\n      })\r\n      .then((response) => {\r\n        return response.json()\r\n      })\r\n      .then((response) => {\r\n        this.colorScheme = response.data.attributes.theme.data.attributes.color\r\n        this.colorSchemeHash = this.colorScheme.slice(1)\r\n\r\n        return (this.colorScheme !== CONST.NULL && this.colorSchemeHash !== CONST.NULL) ? true : false\r\n      })\r\n      .catch((error) => {\r\n        throw new Error(CONST.ERR_GETTING_COLOR_SCHEME + \" [\" + error + \"]\")\r\n      })\r\n\r\n  }\r\n  \r\n}\r\n"]}
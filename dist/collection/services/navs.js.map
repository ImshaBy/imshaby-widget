{"version":3,"file":"navs.js","sourceRoot":"","sources":["../../src/services/navs.tsx"],"names":[],"mappings":"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","sourcesContent":["import { D } from \"../utils/days\";\r\n\r\nexport class DaysNavigation {\r\n\r\n    scheduleInfo: any;\r\n    allDays: any[] = [];\r\n    daysNavs: {\r\n      day: string,\r\n      date: any,\r\n      disabled: string,\r\n      active: string,\r\n      dayNumber: string,\r\n    }[] = [];\r\n  \r\n    constructor(props) {\r\n        this.scheduleInfo = props.scheduleInfo\r\n        this.prepareMassData()\r\n        this.prepareNavs()\r\n    }\r\n\r\n\r\n    private dayInDaysExists(days: any): any {\r\n        let found = this.scheduleInfo.find((el) => days == el.days)\r\n        return (found === undefined) ? false : true\r\n    }\r\n\r\n    prepareMassData() {\r\n        this.scheduleInfo = this.scheduleInfo.map(a => {\r\n        return {\r\n          date: a.date,\r\n          dayName: D.getWeekDay(a.date),\r\n          days: a.massHours[0].data[0].days[0],\r\n          massHours: a.massHours.map(e => {\r\n            return {\r\n              time: e.hour,\r\n              info: e.data[0].info,\r\n              duration: e.data[0].duration,\r\n              langCode: e.data[0].langCode,\r\n              needUpdate: e.data[0].needUpdate,\r\n              lastConfirmRelevance: e.data[0].parish.lastConfirmRelevance,\r\n              updatePeriodInDays: e.data[0].parish.updatePeriodInDays,\r\n              online: e.data[0].online,\r\n              rorate: e.data[0].rorate,\r\n              address: e.data[0].parish.address,\r\n              broadcastUrl: e.data[0].parish.broadcastUrl\r\n            }\r\n          }),\r\n        }\r\n      })\r\n    }\r\n\r\n    prepareNavs() {\r\n\r\n    let todaysIndex = D.getToday().getDay()\r\n    if (todaysIndex == 0) { todaysIndex = 7 }\r\n\r\n    let index = D.standardDays.indexOf(todaysIndex.toString())\r\n    if (index !== -1) {\r\n        let slicedArray = D.standardDays.slice(index)\r\n        slicedArray = slicedArray.concat(D.standardDays.slice(0, index))\r\n        slicedArray.forEach(day => this.allDays.push(day))\r\n    }\r\n\r\n    this.daysNavs = this.allDays.map((a, i) => {\r\n        let active = ''\r\n        let date: any\r\n        let day = ''\r\n        let disabled = ''\r\n        let newDate: Date\r\n\r\n        if (this.dayInDaysExists(a)) {\r\n        newDate = new Date( Date.parse( this.scheduleInfo.find(el => el.days == a).date ) )\r\n        date = newDate.getDate().toString().padStart(2, '0') + '.' + (newDate.getMonth() + 1).toString().padStart(2, '0')\r\n        } else {\r\n        disabled = 'disabled'\r\n        date = 'â€”'\r\n        }\r\n\r\n        day = D.getWeekName(a)\r\n        if (i == 0) { active = 'active' }\r\n\r\n        return {\r\n        active: active,\r\n        date: date,\r\n        day: day,\r\n        dayNumber: a,\r\n        disabled: disabled,\r\n        }\r\n    })\r\n\r\n  }\r\n\r\n}"]}